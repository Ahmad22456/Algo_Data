PROCEDURE dot_product(VAR v1: ARRAY_OF INTEGER, VAR v2: ARRAY_OF INTEGER, VAR ps: INTEGER);

VAR
    i : INTEGER;
    ps : INTEGER := 0;

BEGIN

    FOR i FROM 0 TO v1.length - 1 DO
    
        ps := ps + v1[i] * v2[i];

    END_FOR

END

ALGORITHM check_orthogonality

VAR

    i : INTEGER;
    n: INTEGER; 
    ps : INTEGER;
    vectors : ARRAY_OF INTEGER;
    v1, v2 : ARRAY_OF INTEGER;

BEGIN

    FOR i FROM 0 TO n - 1 DO

        // Get the two vectors for this pair

        v1 := vectors[i * 2];
        v2 := vectors[i * 2 + 1];

        // Calculate the dot product of the vectors

        dot_product(v1, v2, ps);

        // Check if the vectors are orthogonal based on the dot product result

        IF (ps = 0) THEN
        
            Write("Vectors v1 and v2 are orthogonal");
        
        ELSE
        
            Write("Vectors v1 and v2 are not orthogonal");

        END_IF;

    END_FOR;

END;

-------------------------- using function instead of a procedure --------------------------


FUNCTION dot_product(VAR v1: ARRAY_OF INTEGER, VAR v2: ARRAY_OF INTEGER): INTEGER

VAR

    i : INTEGER;
    ps : INTEGER;

BEGIN

    ps := 0;

    FOR i FROM 0 TO v1.length - 1 DO

        ps := ps + v1[i] * v2[i];

    END_FOR;

    // Return the result of the dot product

    RETURN ps;

END;

ALGORITHM check_orthogonality

VAR

    i: INTEGER;
    n: INTEGER; 
    ps : INTEGER;
    vectors : ARRAY_OF INTEGER;
    v1, v2 : ARRAY_OF INTEGER;
  
BEGIN

    FOR i FROM 0 TO n - 1 DO

        // Get the two vectors for this pair

        v1 := vectors[i * 2];
        v2 := vectors[i * 2 + 1];

        // Calculate the dot product of the vectors

        ps := dot_product(v1, v2);

        // Check if the vectors are orthogonal based on the dot product result
        
        IF (ps = 0) THEN
        
            Write("Vectors v1 and v2 are orthogonal");
        
        ELSE
        
            Write("Vectors v1 and v2 are not orthogonal");

        END_IF;

    END_FOR;

END;
